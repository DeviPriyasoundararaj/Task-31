-- Table: Movie
CREATE TABLE Movie (
    movie_id INT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    release_date DATE,
    -- Add other movie-related attributes as needed
);

-- Table: Media
CREATE TABLE Media (
    media_id INT PRIMARY KEY,
    movie_id INT,
    media_type ENUM('Video', 'Image') NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id)
);

-- Table: Genre
CREATE TABLE Genre (
    genre_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Table: MovieGenre (to represent the many-to-many relationship between Movie and Genre)
CREATE TABLE MovieGenre (
    movie_id INT,
    genre_id INT,
    PRIMARY KEY (movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (genre_id) REFERENCES Genre(genre_id)
);

-- Table: Review
CREATE TABLE Review (
    review_id INT PRIMARY KEY,
    movie_id INT,
    user_id INT,
    rating INT,
    comment TEXT,
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Table: User
CREATE TABLE User (
    user_id INT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    -- Add other user-related attributes as needed
);

-- Table: Artist
CREATE TABLE Artist (
    artist_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    -- Add other artist-related attributes as needed
);

-- Table: Skill
CREATE TABLE Skill (
    skill_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Table: ArtistSkill (to represent the many-to-many relationship between Artist and Skill)
CREATE TABLE ArtistSkill (
    artist_id INT,
    skill_id INT,
    PRIMARY KEY (artist_id, skill_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (skill_id) REFERENCES Skill(skill_id)
);

-- Table: Role
CREATE TABLE Role (
    role_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- Table: MovieArtistRole (to represent the many-to-many relationship between Movie, Artist, and Role)
CREATE TABLE MovieArtistRole (
    movie_id INT,
    artist_id INT,
    role_id INT,
    PRIMARY KEY (movie_id, artist_id, role_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (role_id) REFERENCES Role(role_id)
);
